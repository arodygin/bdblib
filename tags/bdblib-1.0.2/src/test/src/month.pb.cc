// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "month.pb.h"
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace month {

namespace {

const ::google::protobuf::Descriptor* key_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  key_reflection_ = NULL;
const ::google::protobuf::Descriptor* data_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  data_reflection_ = NULL;
const ::google::protobuf::Descriptor* season_ix_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  season_ix_reflection_ = NULL;
const ::google::protobuf::Descriptor* days_ix_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  days_ix_reflection_ = NULL;
const ::google::protobuf::Descriptor* ordnum_ix_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ordnum_ix_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_month_2eproto() {
  protobuf_AddDesc_month_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "month.proto");
  GOOGLE_CHECK(file != NULL);
  key_descriptor_ = file->message_type(0);
  static const int key_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(key, month_),
  };
  key_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      key_descriptor_,
      key::default_instance_,
      key_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(key, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(key, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(key));
  data_descriptor_ = file->message_type(1);
  static const int data_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(data, season_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(data, days_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(data, ordnum_),
  };
  data_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      data_descriptor_,
      data::default_instance_,
      data_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(data, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(data, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(data));
  season_ix_descriptor_ = file->message_type(2);
  static const int season_ix_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(season_ix, season_),
  };
  season_ix_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      season_ix_descriptor_,
      season_ix::default_instance_,
      season_ix_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(season_ix, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(season_ix, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(season_ix));
  days_ix_descriptor_ = file->message_type(3);
  static const int days_ix_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(days_ix, days_),
  };
  days_ix_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      days_ix_descriptor_,
      days_ix::default_instance_,
      days_ix_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(days_ix, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(days_ix, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(days_ix));
  ordnum_ix_descriptor_ = file->message_type(4);
  static const int ordnum_ix_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ordnum_ix, ordnum_),
  };
  ordnum_ix_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ordnum_ix_descriptor_,
      ordnum_ix::default_instance_,
      ordnum_ix_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ordnum_ix, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ordnum_ix, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ordnum_ix));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_month_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    key_descriptor_, &key::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    data_descriptor_, &data::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    season_ix_descriptor_, &season_ix::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    days_ix_descriptor_, &days_ix::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ordnum_ix_descriptor_, &ordnum_ix::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_month_2eproto() {
  delete key::default_instance_;
  delete key_reflection_;
  delete data::default_instance_;
  delete data_reflection_;
  delete season_ix::default_instance_;
  delete season_ix_reflection_;
  delete days_ix::default_instance_;
  delete days_ix_reflection_;
  delete ordnum_ix::default_instance_;
  delete ordnum_ix_reflection_;
}

void protobuf_AddDesc_month_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\013month.proto\022\005month\"\024\n\003key\022\r\n\005month\030\001 \002"
    "(\t\"4\n\004data\022\016\n\006season\030\001 \002(\t\022\014\n\004days\030\002 \002(\005"
    "\022\016\n\006ordnum\030\003 \002(\003\"\033\n\tseason_ix\022\016\n\006season\030"
    "\001 \002(\t\"\027\n\007days_ix\022\014\n\004days\030\001 \002(\005\"\033\n\tordnum"
    "_ix\022\016\n\006ordnum\030\001 \002(\003", 179);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "month.proto", &protobuf_RegisterTypes);
  key::default_instance_ = new key();
  data::default_instance_ = new data();
  season_ix::default_instance_ = new season_ix();
  days_ix::default_instance_ = new days_ix();
  ordnum_ix::default_instance_ = new ordnum_ix();
  key::default_instance_->InitAsDefaultInstance();
  data::default_instance_->InitAsDefaultInstance();
  season_ix::default_instance_->InitAsDefaultInstance();
  days_ix::default_instance_->InitAsDefaultInstance();
  ordnum_ix::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_month_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_month_2eproto {
  StaticDescriptorInitializer_month_2eproto() {
    protobuf_AddDesc_month_2eproto();
  }
} static_descriptor_initializer_month_2eproto_;


// ===================================================================

const ::std::string key::_default_month_;
#ifndef _MSC_VER
const int key::kMonthFieldNumber;
#endif  // !_MSC_VER

key::key()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void key::InitAsDefaultInstance() {
}

key::key(const key& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void key::SharedCtor() {
  _cached_size_ = 0;
  month_ = const_cast< ::std::string*>(&_default_month_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

key::~key() {
  SharedDtor();
}

void key::SharedDtor() {
  if (month_ != &_default_month_) {
    delete month_;
  }
  if (this != default_instance_) {
  }
}

void key::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* key::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return key_descriptor_;
}

const key& key::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_month_2eproto();  return *default_instance_;
}

key* key::default_instance_ = NULL;

key* key::New() const {
  return new key;
}

void key::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (month_ != &_default_month_) {
        month_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool key::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string month = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_month()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->month().data(), this->month().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void key::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string month = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->month().data(), this->month().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->month(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* key::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string month = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->month().data(), this->month().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->month(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int key::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string month = 1;
    if (has_month()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->month());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void key::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const key* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const key*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void key::MergeFrom(const key& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_month(from.month());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void key::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void key::CopyFrom(const key& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool key::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void key::Swap(key* other) {
  if (other != this) {
    std::swap(month_, other->month_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata key::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = key_descriptor_;
  metadata.reflection = key_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string data::_default_season_;
#ifndef _MSC_VER
const int data::kSeasonFieldNumber;
const int data::kDaysFieldNumber;
const int data::kOrdnumFieldNumber;
#endif  // !_MSC_VER

data::data()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void data::InitAsDefaultInstance() {
}

data::data(const data& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void data::SharedCtor() {
  _cached_size_ = 0;
  season_ = const_cast< ::std::string*>(&_default_season_);
  days_ = 0;
  ordnum_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

data::~data() {
  SharedDtor();
}

void data::SharedDtor() {
  if (season_ != &_default_season_) {
    delete season_;
  }
  if (this != default_instance_) {
  }
}

void data::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* data::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return data_descriptor_;
}

const data& data::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_month_2eproto();  return *default_instance_;
}

data* data::default_instance_ = NULL;

data* data::New() const {
  return new data;
}

void data::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (season_ != &_default_season_) {
        season_->clear();
      }
    }
    days_ = 0;
    ordnum_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool data::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string season = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_season()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->season().data(), this->season().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_days;
        break;
      }
      
      // required int32 days = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_days:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &days_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_ordnum;
        break;
      }
      
      // required int64 ordnum = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ordnum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &ordnum_)));
          _set_bit(2);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void data::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string season = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->season().data(), this->season().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->season(), output);
  }
  
  // required int32 days = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->days(), output);
  }
  
  // required int64 ordnum = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->ordnum(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* data::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string season = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->season().data(), this->season().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->season(), target);
  }
  
  // required int32 days = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->days(), target);
  }
  
  // required int64 ordnum = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->ordnum(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int data::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string season = 1;
    if (has_season()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->season());
    }
    
    // required int32 days = 2;
    if (has_days()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->days());
    }
    
    // required int64 ordnum = 3;
    if (has_ordnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->ordnum());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void data::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const data* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const data*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void data::MergeFrom(const data& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_season(from.season());
    }
    if (from._has_bit(1)) {
      set_days(from.days());
    }
    if (from._has_bit(2)) {
      set_ordnum(from.ordnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void data::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void data::CopyFrom(const data& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool data::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void data::Swap(data* other) {
  if (other != this) {
    std::swap(season_, other->season_);
    std::swap(days_, other->days_);
    std::swap(ordnum_, other->ordnum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata data::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = data_descriptor_;
  metadata.reflection = data_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string season_ix::_default_season_;
#ifndef _MSC_VER
const int season_ix::kSeasonFieldNumber;
#endif  // !_MSC_VER

season_ix::season_ix()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void season_ix::InitAsDefaultInstance() {
}

season_ix::season_ix(const season_ix& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void season_ix::SharedCtor() {
  _cached_size_ = 0;
  season_ = const_cast< ::std::string*>(&_default_season_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

season_ix::~season_ix() {
  SharedDtor();
}

void season_ix::SharedDtor() {
  if (season_ != &_default_season_) {
    delete season_;
  }
  if (this != default_instance_) {
  }
}

void season_ix::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* season_ix::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return season_ix_descriptor_;
}

const season_ix& season_ix::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_month_2eproto();  return *default_instance_;
}

season_ix* season_ix::default_instance_ = NULL;

season_ix* season_ix::New() const {
  return new season_ix;
}

void season_ix::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (season_ != &_default_season_) {
        season_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool season_ix::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string season = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_season()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->season().data(), this->season().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void season_ix::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string season = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->season().data(), this->season().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->season(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* season_ix::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string season = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->season().data(), this->season().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->season(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int season_ix::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string season = 1;
    if (has_season()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->season());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void season_ix::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const season_ix* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const season_ix*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void season_ix::MergeFrom(const season_ix& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_season(from.season());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void season_ix::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void season_ix::CopyFrom(const season_ix& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool season_ix::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void season_ix::Swap(season_ix* other) {
  if (other != this) {
    std::swap(season_, other->season_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata season_ix::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = season_ix_descriptor_;
  metadata.reflection = season_ix_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int days_ix::kDaysFieldNumber;
#endif  // !_MSC_VER

days_ix::days_ix()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void days_ix::InitAsDefaultInstance() {
}

days_ix::days_ix(const days_ix& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void days_ix::SharedCtor() {
  _cached_size_ = 0;
  days_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

days_ix::~days_ix() {
  SharedDtor();
}

void days_ix::SharedDtor() {
  if (this != default_instance_) {
  }
}

void days_ix::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* days_ix::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return days_ix_descriptor_;
}

const days_ix& days_ix::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_month_2eproto();  return *default_instance_;
}

days_ix* days_ix::default_instance_ = NULL;

days_ix* days_ix::New() const {
  return new days_ix;
}

void days_ix::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    days_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool days_ix::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 days = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &days_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void days_ix::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 days = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->days(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* days_ix::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 days = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->days(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int days_ix::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 days = 1;
    if (has_days()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->days());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void days_ix::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const days_ix* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const days_ix*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void days_ix::MergeFrom(const days_ix& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_days(from.days());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void days_ix::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void days_ix::CopyFrom(const days_ix& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool days_ix::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void days_ix::Swap(days_ix* other) {
  if (other != this) {
    std::swap(days_, other->days_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata days_ix::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = days_ix_descriptor_;
  metadata.reflection = days_ix_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ordnum_ix::kOrdnumFieldNumber;
#endif  // !_MSC_VER

ordnum_ix::ordnum_ix()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ordnum_ix::InitAsDefaultInstance() {
}

ordnum_ix::ordnum_ix(const ordnum_ix& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ordnum_ix::SharedCtor() {
  _cached_size_ = 0;
  ordnum_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ordnum_ix::~ordnum_ix() {
  SharedDtor();
}

void ordnum_ix::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ordnum_ix::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ordnum_ix::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ordnum_ix_descriptor_;
}

const ordnum_ix& ordnum_ix::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_month_2eproto();  return *default_instance_;
}

ordnum_ix* ordnum_ix::default_instance_ = NULL;

ordnum_ix* ordnum_ix::New() const {
  return new ordnum_ix;
}

void ordnum_ix::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ordnum_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ordnum_ix::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 ordnum = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &ordnum_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ordnum_ix::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 ordnum = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->ordnum(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ordnum_ix::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 ordnum = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->ordnum(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ordnum_ix::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 ordnum = 1;
    if (has_ordnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->ordnum());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ordnum_ix::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ordnum_ix* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ordnum_ix*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ordnum_ix::MergeFrom(const ordnum_ix& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_ordnum(from.ordnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ordnum_ix::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ordnum_ix::CopyFrom(const ordnum_ix& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ordnum_ix::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void ordnum_ix::Swap(ordnum_ix* other) {
  if (other != this) {
    std::swap(ordnum_, other->ordnum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ordnum_ix::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ordnum_ix_descriptor_;
  metadata.reflection = ordnum_ix_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace month

// @@protoc_insertion_point(global_scope)
